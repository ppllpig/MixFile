name: Sync, Patch, Build and Release

on:
  schedule:
    # 每天 UTC 时间 0 点触发 (北京时间早上8点)
    - cron: '0 0 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 步骤 1: 检出您自己的仓库
    - name: Checkout your repository
      uses: actions/checkout@v4

    # 步骤 2: 设置 Git 用户信息
    - name: Set up Git user
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    # 步骤 3: 同步上游最新代码
    - name: Sync with Upstream Latest
      run: |
        git remote add upstream https://github.com/InvertGeek/MixFile.git
        git fetch upstream master
        git reset --hard upstream/master

    # 步骤 4: 应用外科手术式补丁
    - name: Apply Surgical Patches
      run: |
        MOD_DIR="app/src/main/java/com/donut/mixfile/ui/routes/webdav"
        
        # 补丁 1: 在 WebDav.kt 中添加下载 UI
        sed -i '/Text("支持webdav存档文件和mix_list文件导入", color = colorScheme.primary)/a \
        \    var downloadUrl by remember { mutableStateOf("") }\
        \    OutlinedTextField(\
        \        value = downloadUrl,\
        \        onValueChange = { downloadUrl = it },\
        \        label = { Text("请输入下载链接") },\
        \        modifier = Modifier.fillMaxWidth()\
        \    )\
        \    Button(\
        \        onClick = {\
        \            if (downloadUrl.isNotEmpty()) {\
        \                downloadToWebDav(downloadUrl)\
        \            }\
        \        },\
        \        modifier = Modifier.fillMaxWidth()\
        \    ) {\
        \        Text("下载到 WebDAV")\
        \    }' "${MOD_DIR}/WebDav.kt"

        # 补丁 2: 在 Dialogs.kt 中添加 import 和 downloadToWebDav 函数
        sed -i '/import kotlinx.coroutines.withContext/a \
        import androidx.compose.ui.platform.LocalContext\
        import java.io.File\
        import kotlinx.coroutines.launch' "${MOD_DIR}/Dialogs.kt"
        
        sed -i '$a \
        \fun downloadToWebDav(url: String) {\
        \    val progress = ProgressContent()\
        \    MixDialogBuilder("下载并导入中").apply {\
        \        setContent {\
        \            val context = LocalContext.current\
        \            AsyncEffect {\
        \                errorDialog("下载失败", onError = { closeDialog() }) {\
        \                    val data = loadDataWithMaxSize(url, progress)\
        \                    val dav = mixFileServer.webDav\
        \                    val encodedFileName = url.substringAfterLast("/")\
        \                    val fileName = java.net.URLDecoder.decode(encodedFileName, "UTF-8")\
        \                    val tempDir = File(context.cacheDir, "webtemp")\
        \                    if (!tempDir.exists()) {\
        \                        tempDir.mkdirs()\
        \                    }\
        \                    val tempFile = File(tempDir, fileName)\
        \                    tempFile.writeBytes(data)\
        \                    val newFile = WebDavFile(tempFile.name)\
        \                    dav.WEBDAV_DATA.addFile(newFile)\
        \                    dav.saveData()\
        \                    tempFile.delete()\
        \                    showToast("下载并导入成功!")\
        \                }\
        \                withContext(Dispatchers.Main) {\
        \                    closeDialog()\
        \                }\
        \            }\
        \            progress.LoadingContent()\
        \        }\
        \        setDefaultNegative()\
        \        show()\
        \    }\
        \}' "${MOD_DIR}/Dialogs.kt"

        # 补丁 3: 修复 Dialogs.kt 中 exportWebDavData 的 0KB 文件问题
        sed -i 's/doUploadFile(mixFileServer.webDav.dataToBytes(), "${fileName}.mix_dav", false)/val finalFileName = "${fileName}.mix_dav"\\n            kotlinx.coroutines.CoroutineScope(kotlinx.coroutines.Dispatchers.IO).launch {\\n                val data = mixFileServer.webDav.dataToBytes()\\n                doUploadFile(data, finalFileName, false)\\n            }/' "${MOD_DIR}/Dialogs.kt"

    # 步骤 5: 设置构建环境
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # 步骤 6: 构建 APK
    - name: Build with Gradle
      run: ./gradlew assembleRelease

    # 步骤 7: 提取版本号并创建/更新 Release
    - name: Create or Update Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION_NAME=$(grep "versionName =" app/build.gradle.kts | sed 's/.*versionName = "\(.*\)"/\1/')
        gh release create "v$VERSION_NAME-mod" app/build/outputs/apk/release/*.apk --repo ${{ github.repository }} --title "v$VERSION_NAME (Patched)" --notes "Automated build with WebDAV download feature." || gh release upload "v$VERSION_NAME-mod" app/build/outputs/apk/release/*.apk --repo ${{ github.repository }} --clobber